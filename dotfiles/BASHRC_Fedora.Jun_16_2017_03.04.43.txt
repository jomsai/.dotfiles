# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
##=============BEGIM My PERSONAL SETTINGS=======##
## .bashrc

#====My PS1 from Kirsle Online PS1 generator=====#
#PS1="\[$(tput bold)\]\[$(tput setaf 5)\]\t\[$(tput setaf 2)\][\[$(tput setaf 4)\] \u \[$(tput setaf 1)\]]==> \[$(tput setaf 3)\]\h \[$(tput setaf 6)\] \W ]\[$(tput bold)\]\[$(tput setaf 2)\][ $?! ]\[$(tput setaf 4)\][[>\[$(tput setaf 1)\]\\$ \[$(tput sgr0)\]"

PS1="\[$(tput bold)\]\[$(tput setaf 5)\]\t\[$(tput setaf 2)\][\[$(tput setaf 6)\] \u@\[$(tput setaf 3)\]\h \[$(tput setaf 6)\] \W ]\[$(tput bold)\]\[$(tput setaf 2)\][ $?! ]\[$(tput setaf 4)\][[>\[$(tput setaf 1)\]\\$ \[$(tput sgr0)\]"

#======================ls========================#
alias ls='ls -hailcF --color=auto'
alias ll='ls -lv --group-directories-first'
alias lss='ls | less'  # ls+less
alias ln='ls -n'  # UID PID instead of names
alias lA='\ls -lhFA --color=auto'
alias lAr='\ls -lhFra --color=auto'  #reverse alphabetical sort
alias lsize='ls -S'   #Sort by file size
alias lmod='ls -tlc'  # Sort by Mod Time, New 1st
alias lmodr='ls -tlcr' # Sort by Modification Time New Last
alias lswc='ls | wc -l'  # This ls has how many lines?
alias ld='ls -d */'   # only Dirs
alias ldr='\ls -lhiFr --color=auto' #DIR only reverse Alphabet
alias l.='ls -dAFh .[^.]*'  # ls only Dotfiles
alias lst='ls -hFtal | grep $(date +%Y-%m-%d)' #ls Today
alias lu='ls -l /dev/disk/by-uuid'
alias lz='ls -Z'  #SELinux Security Context ls
#======================cd========================#
cd() { builtin cd "$@" && ls; }   # cd then ls DIR
alias -- -="cd -" # Have no idea about this. Gotta know.
alias ..='cd ..'
alias ...='cd ../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../../'
#==================Fixes for Sudo================#
# I prefer command | xargs sudo
# alias ll | sed "s/.*'\(.*\)'.*/\1/g" | xargs sudo
alias sudo='sudo '
alias sbb='sudo $(fc -ln -1)'  # sudo !! shortcut
#===tmux Edit/Source/Backup/Split .tmux.conf=====#
alias so='source ~/.bash_profile && \cp ~/.bashrc ~/.bashrc.bak && \cp ~/.bashrc ~/Documents/BASHRC_Fedora.$(date "+%b_%d_%Y_%H.%M.%S").txt && echo "Yep BASHRC Saved!!!!"'
alias sotmux='source ~/.tmux.conf && \cp ~/.tmux.conf ~/.tmux.conf.bak && \cp ~/.tmux.conf ~/Documents/TMUXCONF_Fedora_Plugins.$(date "+%b_%d_%Y_%H.%M.%S").txt && echo "TMUX Awesome!"'
alias tmuxv='tmux split-window -h -p 40'
alias tmuxh='tmux split-window -v -l 30'
alias tmuxhh='tmux split-window -h -p 50'
alias sovim='source ~/.vimrc && \cp ~/.vimrc ~/.vimrc.bak && \cp ~/.vimrc ~/Documents/VIMRC_Fedora_Plugins.$(date "+%b_%d_%Y_%H.%M.%S").txt && echo "VIMRC Saved!"'
##============Yum DNF Package Manager===========##
alias dnffind='sudo dnf search'
alias dnfinstall='sudo dnf install'
alias dnfupdate='sudo dnf update && sudo dnf upgrade && echo Updated'
alias yumupdate='sudo yum update -y && sudo yum upgrade -y && echo "Slimy!"'  # No ARG needed
alias yuminstall='sudo yum install -y'  # needs 1 ARG
alias yumfind='sudo yum list | grep' # needs 1 ARG
alias yuminfo='sudo yum info'  # needs 1 ARG
alias yumlocalpackages='yum list installed > ~/Documents/yum_packages_installed.txt'
alias yumrepos='yum repolist'
#=============Edit the Dotfiles==================#
alias ebrc='vim ~/.bashrc'
alias evimrc='vim ~/.vimrc'
alias etmux='vim ~/.tmux.conf'
#=======Environemental Variables=================#
alias env='printenv'
alias env2='export -p'
alias path='echo -e ${PATH//:/\\n}'  # executable Paths
alias bashv='/bin/bash --version | grep bash | cut -d "," -f2 | cut -c 10-50'
alias shoptvar='shopt -p' # ShowALL & u=OFF, s=ON status
alias shopton='shopt -s'    # Show all s=ON
alias shoptoff='shopt -u'   # Show all u=OFF
#=Bash Options=shopt -s=set -u=unset options=====#
# -p=ListALLOptions -q=EXIT0 if set 1 if not=====#
#= -o=List all SET env Options that are set on===#
#shopt -s cdspell  #small spell autocorrects
shopt -s cdable_vars  # cd ls assumes DIR where ls is
shopt -s checkhash   # ls (does exist? yes ok do it)
shopt -s checkwinsize   #update winsize if needed
#shopt -s sourcepath  #Already Default enabled
shopt -s no_empty_cmd_completion
shopt -s extglob   # Needed for programmable completion
#histappend --try to list long commands on 1 line
# Disable options: # No shell warn incoming mail
shopt -u mailwarn
unset MAILCHECK
#====history related shopt options
shopt -s cmdhist #Saves all of a long cmd in history
shopt -s histappend histreedit histverify
PROMPT_COMMAND='history -a'
#==================Networking====================#
alias pi='echo $(echo "scale=30; 4*a(1)" | bc -l)'
alias ping3='ping -c3 -s1 8.8.8.8'
alias fastping='ping -c 100 -s.2'
#alias nface="ip -s link | grep 2: | cut -d ' ' -f2" #Linux
#alias nface2="ip addr | grep 'state UP' | gawk '{print $2}' | sed -e 's/://'"
alias nface="ip addr | grep 'state UP' | cut -d ' ' -f2 | sed -e 's/://'"
alias nface3="netstat -r | grep default | awk '{print $8}'" #Linux
#alias intip='ifconfig | head -n 2 | grep inet | cut -c 14-24'
alias intip="ip addr | grep 192.168.1.255 | cut -d '/' -f1 | cut -c 10-25"
alias extip="curl icanhazip.com"
alias extip2="dig +short myip.opendns.com @resolver1.opendns.com"
# type arch at CLI gets x86_64 (arc below x86-64) but where did that come from? Use arch
#alias arc='hostnamectl | grep Architecture | cut -d ":" -f2 | cut -c 2-7' #x86-64
alias kernel='hostnamectl | grep Kernel | cut -d ":" -f2 | cut -c 2-35'
alias kernelno='uname -r'
alias os='hostnamectl | grep System | cut -d ":" -f2 | cut -c 2-27'
alias routes='netstat -r'
alias tcp='netstat -anp tcp'
alias udp='netstat -anp udp'
alias ports="sudo lsof -i | grep LISTEN && netstat -an | grep LISTEN"  #ports: listen connections x2
alias listen='netstat -anp tcp | grep LISTEN'  # listen: All listen connections
alias sock='lsof -i'  #All open TCP/IP Sockets
alias loop='netstat -anp tcp | grep 127.0.0.1'  # Loopback interface tcp stats
alias tdump='sudo tcpdump -i 1 -c800 -ttt -w ~/tmp/tdump800.pcap'
uuid() { nmcli c | grep ethernet | awk '{print $2}' ; }
alias cdext4='cd /run/media/pedro/8d8dd6fb-5eb8-4f43-a764-fd2e96b2e607'
alias cdntfs='cd /run/media/pedro/NTFS'

alias sshreload='sudo systemctl reload sshd && sudo systemctl status sshd'
alias sshstatus='sudo systemctl status sshd'
alias sshgit='ssh -Tv git@github.com'
alias sshdepend='sudo systemctl list-dependencies sshd'
alias sshkey='ssh-add -l'  # Either no ID or shows active fingerprint
alias sshenv='ssh-agent -s'
alias sshstartkey='eval `ssh-agent` && sudo ssh-add ~/.ssh/id_rsa && sudo ssh-add -l && sudo ssh-agent -s && echo "ssh agent on so go"'
alias sshkeychainadd='/usr/bin/ssh-add -k ~/.ssh/id_rsa'  #Need passphrase ready & adds key ID to the keychain
alias sshdeleteremotekey='ssh-keygen -R'  #Needs 1 ARG for remote IP
alias sshfingerprint='sudo ssh-keygen -lv -f ~/.ssh/id_rsa.pub'
alias sshdebug='sudo /usr/sbin/sshd -d'
##===================Processes==================##
alias psg='ps aux | grep -v grep | grep -i -e VSZ -e' #Needs 1 ARG to grep for
alias psl='ps -aux | less'
alias atop='sudo atop' #Must install it
#===================System Services==============#
alias reboot='sudo systemctl reboot' #All users get a warning
alias poweroff='sudo systemctl poweroff' #All users get a warning
alias halt='sudo systemctl halt' #All users get a warning
alias sysctla='sudo systemctl list-units --all --state=active'
alias sysctli='sudo systemctl list-units --all --state=inactive'
alias sysctlall='sudo systemctl list-unit-files --all'
alias sysctlstatus='sudo systemctl status'
alias sysctlreload='sudo systemctl reload'
alias sysctlrestart='sudo systemctl restart'
alias sysctlNM='sudo systemctl restart NetworkManager && sudo systemctl status NetworkManager'
alias sysctlnetwork='sudo systemctl restart network && sudo systemctl status network'
alias sysctlon='sudo systemctl start'
alias sysctloff='sudo systemctl stop'
##==================Iptables====================##
alias iptdnsens3='sudo iptables -A OUTPUT -o ens3 -p udp -m udp --dport 53 -j ACCEPT'
alias iptdropall='sudo iptables -P INPUT DROP && sudo iptables -P FORWARD DROP && sudo iptables -P OUTPUT DROP && echo "All Chains Dropped"'
alias iptdropinvalid='sudo iptables -A INPUT -m conntrack --ctstate INVALID -j DROP'
alias iptestablishedin='sudo iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT'
alias iptestablishedout='sudo iptables -A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT'
alias iptflush='sudo iptables -t nat -F && sudo iptables -t mangle -F && sudo iptables -F && sudo iptables -X && echo "Flushed!"'
alias ipthttpens3='sudo iptables -A OUTPUT -o ens3 -p tcp -m tcp --dport 80 -m state --state NEW -j ACCEPT'
alias ipthttpsens3='sudo iptables -A OUTPUT -o ens3 -p tcp -m tcp --dport 443 -m state --state NEW -j ACCEPT'
alias iptlimitssh='sudo iptables -A INPUT -p tcp --syn --dport 22 -m connlimit --connlimit-above 3 -j REJECT'
alias iptlo='sudo iptables -A INPUT -i lo -j ACCEPT'
alias iptlogon1='sudo iptables -N LOGGING && sudo iptables -A INPUT -j LOGGING'
alias iptlogon2='sudo iptables -A LOGGING -m limit --limit 2/min -j LOG --log-prefix "IPTables Packet Dropped: " --log-level 7'
alias iptlogon3='sudo iptables -A LOGGING -j DROP'
alias iptsshinens3a='sudo iptables -A INPUT -i ens3 -p tcp -s 192.168.64.0/24 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT'
alias iptsshinens3b='sudo iptables -A INPUT -i ens3 -p tcp -s 192.168.1.0/24 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT'
alias iptsshoutens3='sudo iptables -A OUTPUT -o ens3 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT'
alias iptrestore='sudo /usr/sbin/iptables-restore'
alias iptsave46='sudo /usr/sbin/iptables-save && sudo /usr/sbin/ip6tables-save && echo "IPv4&6 Rules Saved"'
alias iptrestore46='sudo /usr/sbin/iptables-restore && sudo /usr/sbin/ip6tables-restore && echo "IPtables 4&6 Restored"'

alias ipt6flush='sudo ip6tables -t nat -F && sudo ip6tables -t mangle -F && sudo ip6tables -F && sudo ip6tables -X && echo "Flushed!"'
alias ipt6dropall='sudo ip6tables -P INPUT DROP && sudo ip6tables -P FORWARD DROP && sudo ip6tables -P OUTPUT DROP && echo "IPv6-dropped!"'

alias iptls='echo $SEP $bldcyn IP4Rules $rst && sudo iptables -vL && echo $SEP $bldcyn IP6Rules $rst && sudo ip6tables -vL'
alias iptls2='echo IP4Rules && sudo iptables -nL --line-numbers && echo $SEP && echo IP6Rules && sudo ip6tables -nL --line-numbers'
alias iptmyrules='sudo iptables -S'
alias iptlsfw='sudo iptables -L FORWARD -n -v --line-numbers'
alias iptlsin='sudo iptables -L INPUT -n -v --line-numbers'
alias iptlsout='sudo iptables -L OUTPUT -n -v --line-numbers'

alias iptreload='sudo systemctl reload iptables && sudo systemctl status iptables && echo Reloaded'
alias iptrminrule='sudo iptables -D INPUT'
alias iptrmoutrule='sudo iptables -D OUTPUT'
alias iptsshinout='sudo iptables -A INPUT -p tcp --dport ssh -j ACCEPT && sudo iptables -A OUTPUT -o ens3 -p tcp -m tcp --dport 22 -j ACCEPT'
#================Misc Aliases====================#
##================Safer Options=================##
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'
alias cp='cp -i'
alias mv='mv -iZ'  #Interactive & set correct context for new DIR
alias ln='ln -i'
alias rm='rm -I --preserve-root' #Interactive > 3 files & nada under /

alias c='/usr/bin/clear'
alias diff='colordiff'
alias du='du -ach'
alias df='df -Tha'
alias dfhome='df -ha $HOME && sudo pydf'

alias aliasg='alias | grep'
alias bc='bc -l'
alias cacert='curl --remote-name --time-cond cacert.pem https://curl.haxx.se/ca/cacert.pem'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias fhere="find . -name "
alias fs='sudo fsarchiver probe -v'
alias h='history'
alias j='jobs'
alias less='less -R --tabs=4' # colorful 'less', tab stops = 4
alias mkdir='mkdir -p -v'
function mkdircd () { mkdir -p "$@" && eval cd "\"\$$#\""; }
alias mount='mount |column -t'
alias now='date +"%T"'
alias now='date +"%T"'
alias nowtime=now
alias nowdate='date +"%d-%m-%Y"'
alias pi='echo $(echo "scale=30; 4*a(1)" | bc -l)' #Must install bc

alias python3='/usr/bin/python3.5'

alias sha1='openssl dgst -sha1 '
alias sha256='openssl dgst -sha256'
alias sha512='openssl dgst -sha512'
alias shawhirlpool='openssl dgst -whirlpool'
alias term_size='echo "Rows=$(tput lines) Cols=$(tput cols)"'
#alias timecheck='echo "Current TZ is ==> ${reverse}$(sudo cat /etc/timezone)${rst}" && sudo dpkg-reconfigure --frontend noninteractive tzdata'
alias timezoneset='echo "Asia/Bangkok" | sudo tee /etc/timezone'
alias timeset='sudo tlsdate -wv' #Download tlsdate. -v=verbose, -w=HTTPS option
alias chrome='/opt/google/chrome/chrome'
alias header='curl -I'
alias headerc='curl -I --compress'

alias wget='wget -c' # Continues if the download stalls
alias vi=vim
alias edit="$EDITOR"  # if not set then use vim in quotes

alias wdir='watch -p -n 10 "ls $@"' #Needs DIR ARG and use in 2 tmux splits
#alias yt="youtube-dl -f mp4"
function yt() { youtube-dl -f mp4 $@ ; }
function rminode () { find . -inum $@ -exec rm {} \; ; }
#==============Archival & Packaging==============#
##===============Archives & Packaging===========##
alias tarit='tar -cvf'
alias tarbz2='tar -cvjf'
alias targz='tar -cvzf'
alias untar='tar -xvf'
alias untarbz2='tar -xvjf'
alias untargz='tar -xvzf'
#==================Virus Scanning================#
alias clamscan='sudo clamscan'
alias clamdb='sudo freshclam'
alias clamhelp='clamscan --help'

alias clamdocuments='sudo clamscan -r --bell -i ~/Documents -l /var/log/clamscan.log'
alias clamdownloads='sudo clamscan -r --bell -i ~/Downloads -l /var/log/clamscan.log'
alias clamroot='sudo clamscan -ri / -l /var/log/clamscan.log'
alias clamhome='sudo clamscan -ri ~ -l /var/log/clamscan.log'
alias clamlog='sudo tail -n 40 /var/log/clamscan.log > /home/$USER/Documents/ClamLOG.txt'
alias clamlogdb='tail -n60 /var/log/clamav/freshclam.log'
alias clamlogscan='sudo tail -n60 /var/log/clamscan.log'
alias clamall='sudo clamscan -r --bell -i / | grep FOUND >> /home/$USER/Documents/CLAM_ALL.txt'
alias clampid='ps aux | grep clamd && ps aux | grep fresh'
alias clamversion='clamdscan -V'
alias clamtest='sudo clamscan ~/eicar.com.txt'
##=============RKHunter Aliases=================##
alias rkversion='sudo rkhunter -V && sudo rkhunter --versioncheck'
alias rkdb='sudo rkhunter --propupd'
alias rkcheck='sudo rkhunter -c'
alias rkcron='sudo rkhunter --cronjob > /tmp/RKHUNTERLOG.txt' #No color, no keypresses, to a file
alias rklog='sudo cat /var/log/rkhunter.log'
alias rklogexport='sudo cat /var/log/rkhunter/rkhunter.log > ~/Desktop/RKHUNTERLOG.txt'
alias rkupdate='sudo rkhunter --update'
alias rktests='sudo rkhunter --list rootkits && sudo rkhunter --list tests'
##===================TCP Wrappers===============##
# PROBLEM: Just lists libwrap files not the effected service so I need some prior lines
alias tcpservices='ldd $(which {/usr/bin/*,/usr/sbin/*}) | grep libwrap'
alias tcpservices2='ldd /{,usr/}{bin,sbin}/* | grep -B 50 libwrap | grep '^/''
alias tcpdaemon='ldd $(which sshd) | grep libwrap' #Requires a file path eg /usr/sbin/sshd
alias tcpstatus='tcpdmatch sshd' #Requires a IP or domain ARG
alias tcplog="sudo cat /var/log/messages | grep 'DPT=22 '"
alias tcpconfig='tcpdchk -v'
#===================VM Management================#
#====cpu#==64bit=or=32==Intel=vmx=AMD=svm=etc====#
alias cpuinfo='cat /proc/cpuinfo | grep --color -E "vmx|svm|lm"'
alias cpus='grep processor /proc/cpuinfo'
alias cpuspecs='head /proc/cpuinfo'
alias cpuram='free -mlt'
alias cpuswap='free -mlt'
alias vmsize='ls -Rh ~/VirtualBox\ VMs/ | grep .vdi'
##================Fail2ban Aliases=============##
alias f2bsshlog='sudo cat /var/log/secure | grep "Failed password"'
alias f2bblocks='sudo iptables -L -n'
alias f2bjail='sudo fail2ban-client status'
alias f2bunbanip='sudo fail2ban-client set sshd unbanip' # needs 1 IP ARG
alias f2blog='sudo tail -n 40 /var/log/fail2ban.log'
alias f2blog2='sudo tail -n 40 /var/log/secure'
alias f2bstatus='sudo systemctl status fail2ban'
alias f2bstatus2='sudo fail2ban-client status'
##==================PAM Aliases=================##
alias pamapps='ldd /{,usr/}{bin,sbin}/* | grep -B 5 libpam | grep '^/''
alias pamstatus='ldd $(which $1) | grep libpam '  #Requires 1 APP ARG
alias pammodules='ls /lib/*/security'
alias pamlog='cat /var/log/secure | grep pam'
##===================SELINUX===================##
alias sestatus1='/usr/sbin/getenforce' #SELinux enforcing or not
alias sestatus='sudo sestatus && sudo semanage user -l && sudo sealert -a /var/log/audit/audit.log'
alias seapp='sealert -b'  #Brings up the setroubleshooter app
alias selogs='sudo sealert -a /var/log/audit/audit.log'  #GUI tool parses the logfile
alias sesvc='sudo semanage port -l | grep'  #ARG=service
##====================AppArmor=================##
alias armorstatus='sudo apparmor_status'
alias armorstart=' sudo start apparmor'
alias armorclear='sudo start apparmor ACTION=clear' # clear policy cache
alias armorunload='sudo start apparmor ACTION=teardown' # unload all policy
alias armorreload='sudo start apparmor ACTION=reload' # unload all policy
alias armorforcereload='sudo start apparmor ACTION=force-reload'  # same as 'reload'
alias armorenforc='sudo aa-enforce' #ARG=/path/to/app
alias armorenforceall='sudo aa-enforce /etc/apparmor.d/*'
alias armorcomplainadd='sudo aa-complain'  #ARG=/path/to/app
alias armorcomplainall='sudo aa-complain /etc/apparmor.d/*'
# 2 commnds to reload aa and unloading reloading the kernel
alias armorkernelstop='sudo /etc/init.d/apparmor stop && sudo update-rc.d -f apparmor remove'
alias armorkernelstart='sudo /etc/init.d/apparmor start && sudo update-rc.d apparmor defaults'
alias armorlog2='sudo aa-logprof' #Interactive session
alias armorlog='sudo /var/log/audit/audit.log'
alias armorutil='sudo aa-logprof' #Reads logs & queries whether to allow or not
##=====================Aide IDS=================##
alias aidehelp='sudo aide -h'
alias aideversion='sudo aide -v'
alias aideinit='sudo aide -i'
alias aidecheck='sudo aide -C' # -C=--check the sys (aide defaults to check)
alias aideupdate='sudo aide -u' # -u=--update (rebuilds db after changes made)
alias aidecfgok='sudo aide -D' # -D=--config-check
alias aidecompare='sudo aide --compare' #2DBs
alias aideverbose='sudo aide -V128 -C' # More verbose check level default=20[range0-255]
alias aidelog='sudo tail -n 80 /var/log/aide/aide.log'
#==================Github Aliases================#
alias ga='git add -A'                       #ga:    Git add all files
alias gb='git branch'
alias gcob='git checkout -b'
alias gf='git fetch'
alias gs='git status'                       #gs:    Git status
alias gc='git commit -m'                    #gc:    Git commit w/ message
alias gpu='git pull'                        #gpu:   Git pull
alias gp='git push'                         #gp:    Git push
alias gr='git revert HEAD'                  #gr:    Git revert HEAD
alias gd="git diff --color"                 #gd:    Git diff in color
alias glog='git log'
alias gco='git checkout'
alias gk='gitk --all&'
alias gx='gitx --all'
# Git aliases from https://gist.github.com/ald890/9089169
#alias g="git"
#alias g:rollback="git reset --hard HEAD~1"
#alias gb="git reset --soft HEAD~1"
# https://github.com/git/git/blob/master/contrib/completion/git-completion.bash
#source ~/git-completion.bash   # need the file from URL above in ~
##=================Docker=======================##
alias docimg='sudo systemctl status docker && echo "$(tput setaf 3)##=====Docker Status and Current Docker Images=====##$(tput sgr0)" && sudo docker images'
alias dockali='sudo docker run -i -t b0d9d7dfbd0a /bin/bash'
alias dubrun='sudo docker run -i -t 601d2041b02b /bin/bash'
alias dub2onbg='sudo docker start 601d2041b02b' #Start container in background
alias dub2onfg='sudo docker attach 601d2041b02b' #Reattach fg container terminal
alias dub1onbg='sudo docker start 7486dd6571d1'
alias dub1onfg='sudo docker attach 7486dd6571d1'
alias docimgsha='sudo docker inspect --format='{{.RepoDigests}}' $IMAGE'  #Show sha256sum for  current image
##==================nginx======================##
alias nginxhome='http://localhost:80'
alias nginxedit='sudo vim /etc/nginx/nginx.conf'
alias nginxconf='sudo vim /etc/nginx/nginx.conf'
alias nginxrestart='sudo service nginx restart'
alias nginxreload='sudo /usr/local/nginx/sbin/nginx -s reload'
alias nginxtest='sudo /usr/local/nginx/sbin/nginx -t'
##===========Some Kali Aliases==================##
## run as root the 7 commands below
## See docs.kali.org/downloading/kali-linux-live-usb-persistence
## 1st need correct usb e.g. sdc by # fdisk -l and this will make
## 2 partitions 1 and 2 & so the new persistence will be /dev/sdb3
## a VAR end=7gb  #do this before 2nd Alias
alias kalipersist='read start _ < <(du -bcm kali-linux-2016.2-amd64.iso | tail -1); echo $start parted /dev/sdc mkpart primary $start $end'
alias kalipersist2='mkfs.ext3 -L persistence /dev/sdc3'
alias kalipersist3='e2label /dev/sdc3 persistence'
alias kalipersist4='mkdir -p /mnt/my_usb'
alias kalipersist5='mount /dev/sdc3 /mnt/my_usb'
alias kalipersist6='echo "/ union" > /mnt/my_usb/persistence.conf'
alias kalipersist7='umount /dev/sdc3'
##================Functions=====================##
# No more cd ../../../
up() {
	local d=""
	limit=$1
	for ((i=1; i<=limit; i++))
		do
			d=$d/..
		done
	d=$(echo $d | sed 's/^\///')
	if [ -z "$d" ]; then
		d=..
	fi
	cd $d
}
# Make sure these commands are done via root
# I have an alias for this already sudo included
# Maybe other commands can use this
if [ $UID -ne 0 ]; then
	alias reboot='sudo reboot'
	alias update='sudo apt-get upgrade'
fi

zipf () { zip -r "$1".zip "$1" ; }  # zipf:Create a ZIP archive of a folder
# extract function for any Archive Compression Type
extract () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xjf $1     ;;
			*.tar.gz)    tar xzf $1     ;;
			*.bz2)       bunzip2 $1     ;;
			*.rar)       unrar e $1     ;;
			*.gz)        gunzip $1      ;;
			*.tar)       tar xf $1      ;;
			*.tbz2)      tar xjf $1     ;;
			*.tgz)       tar xzf $1     ;;
			*.zip)       unzip $1       ;;
			*.Z)         uncompress $1  ;;
			*.7z)        7z x $1        ;;
			*)     	 echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
						 echo "'$1' is not a valid file"
	fi
}

# function to print nunbers down the screen as per $1 e.g. count 6
function count(){ python -c "for num in xrange($1):print num";}
# Make your directories and files access rights sane. For EVAL.
#function sanitize() { chmod -R u=rwX,g=rX,o= "$@" ;}

##=================Colors MISC==================##
# Simple Color Settings
BLACK='\e[0;30m'  #0;30=Lt,1;32=Dk
RED='\e[0;31m'  #0;31=Lt,1;31=Dk
GREEN='\e[0;32m' #0;32=Lt,1;32=Dk '\033[1;32m'
BROWN='\e[0;33m'  #0;33=Brown,1;33=Bright YELLOW
BLUE='\e[0;34m'  #0;34=Lt,1;34=Dk
PURPLE='\e[0;35m'  #0;35=Lt,1;35=Dk
CYAN='\e[0;36m'  #0;36=Lt,1;36=Dk
WHITE='\e[1;37m'  #0;37=Lt Gray but 1:37=White

# Some BOLD Color Settings
BOLDBLACK='\e[1;30m'  #0;30=Lt,1;32=Dk
BOLDRED='\e[1;31m'  #0;31=Lt,1;31=Dk
BOLDGREEN='\e[1;32m' #0;32=Lt,1;32=Dk '\033[1;32m'
BOLDYELLOW='\e[1;33m'  #0;33=Brown,1;33=Bright YELLOW
BOLDBLUE='\e[1;34m'  #0;34=Lt,1;34=Dk
BOLDPURPLE='\e[1;35m'  #0;35=Lt,1;35=Dk
BOLDCYAN='\e[1;36m'  #0;36=Lt,1;36=Dk

# Simple Color Backgrounds
BlackBG='\e[40m'
RBG='\e[41m'
GBG='\e[42m'
YBG='\e[43m'
BlueBG='\e[44m'
PBG='\e[45m'
CBG='\e[46m'
WBG='\e[47m'

# LESS man page colors (makes Man pages more readable).
export LESS_TERMCAP_mb=$'\e[01;31m'
export LESS_TERMCAP_md=$'\e[01;31m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;44;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[01;32m'

# Mixed Colors -BOLD element1 Easy to  REV FGBG change 1 to 7
WhiteGrayBG='\e[1;47;88m'
GreenBrownBG='\e[1;100;92m'
BlackYellowBG='\e[1;103;30m'
CyanGrayBG='\e[1;107;36m'
BlackGreenBG='\e[1;102;30m'
YellowMaroonBG='\e[1;88;226m'  # Yellow Text MaroonBG 256 Colors
NC="\e[0m"  # NO COLOR RESET back to Default
BLINK='\e[5;32;47m'  #Blinking GreenFG on GrayBG

# tput SETAF Text 8 color variables
txtund=$(tput sgr 0 1)  # Underline
txtbld=$(tput bold)   # Bold
bldred=${txtbld}$(tput setaf 1) #  red
bldgrn=${txtbld}$(tput setaf 2) #  green
bldyel=${txtbld}$(tput setaf 3) #  yellow
bldblu=${txtbld}$(tput setaf 4) #  blue
bldmag=${txtbld}$(tput setaf 5) #  magenta
bldcyn=${txtbld}$(tput setaf 6) #  cyan
bldwht=${txtbld}$(tput setaf 7) #  white
reverse=${txtbld}$(tput rev)    # reverse FGBG
rst=$(tput sgr0)             # Reset
info=${bldwht}*${rst}        # Feedback
pass=${bldblu}*${rst}
warn=${bldred}*${rst}
ques=${bldblu}?${rst}

# This function echoes 8 COLORS and codes to check your display
print8colors()
{
    echo -e "\n\e[4;31mLight Colors\e[0m  \t\t\e[1;4;31mDark Colors\e[0m"
    echo -e "\e[0;30;47m Black    \e[0m 0;30m \t\e[1;30;40m Dark Gray  \e[0m 1;30m"
    echo -e "\e[0;31;47m Red      \e[0m 0;31m \t\e[1;31;40m Dark Red   \e[0m 1;31m"
    echo -e "\e[0;32;47m Green    \e[0m 0;32m \t\e[1;32;40m Dark Green \e[0m 1;32m"
    echo -e "\e[0;33;47m Brown    \e[0m 0;33m \t\e[1;33;40m Yellow     \e[0m 1;33m"
    echo -e "\e[0;34;47m Blue     \e[0m 0;34m \t\e[1;34;40m Dark Blue  \e[0m 1;34m"
    echo -e "\e[0;35;47m Magenta  \e[0m 0;35m \t\e[1;35;40m DarkMagenta\e[0m 1;35m"
    echo -e "\e[0;36;47m Cyan     \e[0m 0;36m \t\e[1;36;40m Dark Cyan  \e[0m 1;36m"
    echo -e "\e[0;37;47m LightGray\e[0m 0;37m \t\e[1;37;40m White      \e[0m 1;37m"
}

print8fgcolors() { printf '\e[%sm▒' {30..37} 0; echo ; }
print8bgcolors() { printf '\e[%sm ' {40..47} 0; echo ; }
print16colors() {
for clbg in {40..47} {100..107} 49 ; do
    #Foreground
    for clfg in {30..37} {90..97} 39 ; do
        #Formatting
        for attr in 0 1 2 4 5 7 ; do
            #Print the result
            echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
        done
        echo #Newline
    done
done
exit 0
}

#Samples function for 256 COLOR formatting
print256colors() { printf '\e[48;5;%dm ' {0..255}; printf '\e[0m \n' ; }
# 256 COLOR function2 with for loop and tput
print256colors2()
{
    color()
    {
        for c; do
            printf '\e[48;5;%dm%03d' $c $c
                done
                    printf '\e[0m \n'
    }
    IFS=$' \t\n'
    color {0..15}
    for ((i=0;i<6;i++)); do
        color $(seq $((i*36+16)) $((i*36+51)))
        done
        color {232..255}
}

# 16 million COLOR Test Function that works
print16millcolors() { fb=3;r=255;g=1;b=1;printf '\e[0;%s8;2;%s;%s;%sm▒▒▒ ' "$fb" "$r" "$g" "$b" ; }
# OK 16 Million COLORS also but does not work
print16millcolors2() { for r in {200..255..5}; do fb=4;g=1;b=1;printf '\e[0;%s8;2;%s;%s;%sm    ' "$fb" "$r" "$g" "$b"; done ; }
##===============Message Center=================##
#== echo -e for ESC, \033 works > \e on MacOS====#
#== quoting () work but also generate error
#echo -e "ALERT *\\*/ ${PURPLE}${WBG}MOTD${NC}"  #Message in Purple on Yellow
#echo -e "${CYAN}${WBG}The Interface is ${BLINK}${bldyel}${RBG}$(nface)${CYAN}${WBG} - for $USER${NC}"
#echo -e "MOTD \e[107;38;5;199m Fuhgettaboutit \e[33;48;5;52m Semper fi $NC"
#echo -e "$GreenBrownBG Conf in 10 minutes NOT MANDATORY... Free Cookies! $NC"
#echo -e "${BlackYellowBG} Welcome to a new day! ${NC}"
#echo -e "${bldgrn}Green tput ${bldmag}MOTD${rst}"
#echo "$bldgrn Help me! I am out of Oreos! $rst"
#echo "${bldmag} PARTY! at the Boss House 7PM! ${rst}"
#echo "${reverse} Reverse Current FGBG Text MOTD ${rst}"
#printf '\e[38;5;222;48;5;238m   Hi   \e[0m\n'

# Server will SHUTDOWN Message function using tput 6 or CYAN
gohome()
{
        tput setaf 6; echo "The Server will SHUTDOWN in 15 minutes so SAVE and go home"
}

SEP='${bldyel}##=========/\=========##${rst}'
##============To Remember or Works in Progress==##
#colors below=>osxdaily.com/2012/02/21/add-color-to-the-terminal-in-mac-os-x/
# Backup a file with date eg cp file file.$(date "+%b_%d_%Y_%H.%M.%S")
# Get latest curl certificate
# curl ca.pem curl --remote-name --time-cond cacert.pem https://curl.haxx.se/ca/cacert.pem
#export CURL_CA_BUNDLE=~/.ssh/cacert.pem
##============END My PERSONAL SETTINGS==========##
