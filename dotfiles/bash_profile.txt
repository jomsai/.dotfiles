#User Prompts for me to use
#Nice RED Background Bash-Version Prompt is next one
#export PS1="\[\033[0;41m\]<\s-\v$\[\033[0m\]"
#export PS1="\u@\h\W $ "
#export PS1="\u@\h\w $ "
#echo PS1 ---> Output was [\u@\h \W]\$
#export PS1="\[\033[0;41m\]<\u@\h \W\$\[\033[0m\]"
#export PS1="\[\033[0;41m\][>\t  \u@\h \W  [[->\$\[\033[0m\]"
#--->Below is Best Red Background with Red Cursor 1 space after the prompt!!!
#export PS1="\[\033[0;41m\][>\t  \u@\h \W  [[->\$\[\033[0m\] "
#-->Black bg with white text and timed short prompt
#export PS1="\e[\033[37;40m\]]\t\u@\W -->$\[\033[0m\] "
#Best prompt green text on black with time user exit code 
export PS1="\e[\033[36;40m \]\t \u  \W  [ \$?! ]==>$\[\033[0m\] "
#Best but with white letters on BG=Black with Exit Code
#export PS1="\e[\033[37;40m \]\t \u  \W  [ \$?! ]==>$\[\033[0m\] "
#Bash Prompt Generator Online APP with dynamic Exit code
#export PS1=">\T][->\W:>>\u->>\$?!->-\\$\[$(tput sgr0)\]"
#export PS1="\$"
#export PS1=
#export PS1="\a\$"
#export PS1="\A \h \$"
#Strange prompt with RED time at beginning and command area is RED. Also PROMPT always stays on ROW-1
#export PS1="\[\033[s\033[0;0H\033[0;41m\033[K\033[1;33m\t\033[0m\033[u\]<\u@\h \W>\$ "
# Another prompt
#export PS1="[\[\033[36m\]\u\[\033[37m\]@\[\033[33;1m\]\w\[\033[m\]\[\033[32m\]\[\033[m\]\]$ "

export PATH=~/bin:"$PATH"
export PATH=~/Python:"$PATH"

# 2 Color changes to Terminal NOW it works great!
export CLICOLOR=1
export LSCOLORS=ExFxBxDxCxegedabagacad

# Type psman <cmd> and Opens Man Page in Preview.app
psman()
{
man -t "${1}" | open -f -a /Applications/Preview.app/
}

alias ..='cd ../'                # Go back 1 directory level
alias .2='cd ../../'             # Go back 2 directory levels
alias .3='cd ../../../'          # Go back 3 directory levels
alias .4='cd ../../../../'       # Go back 4 directory levels
alias .5='cd ../../../../../'    # Go back 5 directory levels
alias .6='cd ../../../../../../' # Go back 6 directory levels
cd() { builtin cd "$@"; ll; }
alias less='less -FSRXc'
alias ll='ls -l -G'
alias l.='ls -d .* -G'
alias lss='ls -al | less'
alias lg='ls -al | grep ' #just add a term to search for
alias ls='ls -al'
alias lswc='ls -al | wc -l'  # Items in DIR via ls with word count
alias lsl='ls -lah@e -G | less'
alias c='clear'
alias sha1='openssl sha1 '
alias sha256='openssl sha256 '
alias sha512='openssl sha512 '
alias mount='mount |column -t'
alias h='history'
alias j='jobs -l'
alias p3='ping -c 3 -s 1'
alias routes='netstat -r'
alias tcp='netstat -anp tcp'
alias udp='netstat -anp udp'
alias ports='sudo lsof -i | grep LISTEN'  # ports: All listen connections
alias listen='netstat -anp tcp | grep LISTEN'  # listen: All listen connections
alias sock='lsof -i'  #All open TCP/IP Sockets
alias loop='netstat -anp tcp | grep 127.0.0.1'  # Loopback interface tcp stats
alias intip="ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'"
alias extip="dig +short myip.opendns.com @resolver1.opendns.com"
alias myip='curl ip.appspot.com'
alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"
alias en0='ipconfig getpacket en0' # ipInfo0: Get info on connections for en0
alias en1='ipconfig getpacket en1' # ipInfo1: Get info on connections for en1
alias en6='ipconfig getpacket en6' # ipInfo6: Get info on connections for en6
alias so='source .bash_profile' # source both dotfiles
alias rules='sudo pfctl -sa | less'
ql () { qlmanage -p "$*" >& /dev/null; }  # Quicklook any file in Preview
alias path='echo -e ${PATH//:/\\n}'  # path:         Echo all executable Paths
alias shopt='shopt'   # Show_options: display bash options settings
alias flushDNS='dscacheutil -flushcache' # flushDNS: Flush out the DNS Cache
alias tcpdump='tcpdump -i en6 > ~/Desktop/tdump.txt'

# Show Hide Hidden Files Toggle -Try Dotfiles ON OFF for a while to see if it is useful
alias doton='defaults write com.apple.finder ShowAllFiles TRUE'
alias dotoff='defaults write com.apple.finder ShowAllFiles FALSE'

# My USER Processes
my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }
findPid () { lsof -t -c c "$@" ; }
#   memHogsTop, memHogsPs:  Find memory hogs
#   -----------------------------------------------------
alias memHogsTop='top -l 1 -o rsize | head -20'
alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'
#   cpuHogs:  Find CPU hogs
#   -----------------------------------------------------
alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'
alias ttop="top -R -F -s 10 -o rsize"  # Low Resource Top

#    Hosts file info
 ii() {
	echo -e "\nYou are logged on ${RED}$HOST"
	echo -e "\nAdditionnal information:$NC " ; uname -a
	echo -e "\n${RED}Users logged on:$NC " ; w -h
	echo -e "\n${RED}Current date :$NC " ; date
	echo -e "\n${RED}Machine stats :$NC " ; uptime
	echo -e "\n${RED}Current network location :$NC " ; scselect
	echo -e "\n${RED}Public facing IP Address :$NC " ;myip
	#echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
	echo
      }

# Add Vi editing in Bash -Do a $ bind -P to check
set -o vi
# also vim as Default editor ????Have no idea how to use it???
export EDITOR=/usr/bin/vim

#   Git aliases
#   ------------------------------------------------------------
alias ga='git add -A'                       #ga:            Git add all files
alias gs='git status'                       #gs:            Git status
alias gc='git commit -m'                    #gc:            Git commit w/ message
alias gpu='git pull'                        #gpu:           Git pull
alias gp='git push'                         #gp:            Git push
alias gr='git revert HEAD'                  #gr:            Git revert HEAD

# extract any file compression type
extract () {
        if [ -f $1 ] ; then
          case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
             esac
         else
             echo "'$1' is not a valid file"
         fi
    	   }

#   spotlight: Search for a file using MacOS Spotlight's metadata
#   -----------------------------------------------------------
spotlight () { mdfind "kMDItemDisplayName == '$@'wc"; }


# Ruby stuff I had to add for some VIM plugin install to work
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
